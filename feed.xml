<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://carljohanrehn.github.io/allehanda/feed.xml" rel="self" type="application/atom+xml"/><link href="https://carljohanrehn.github.io/allehanda/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-02-26T08:32:11+00:00</updated><id>https://carljohanrehn.github.io/allehanda/feed.xml</id><title type="html">Allehanda</title><entry><title type="html">a post with TikZJax</title><link href="https://carljohanrehn.github.io/allehanda/blog/2023/tikzjax/" rel="alternate" type="text/html" title="a post with TikZJax"/><published>2023-12-12T22:25:00+00:00</published><updated>2023-12-12T22:25:00+00:00</updated><id>https://carljohanrehn.github.io/allehanda/blog/2023/tikzjax</id><content type="html" xml:base="https://carljohanrehn.github.io/allehanda/blog/2023/tikzjax/"><![CDATA[<p>This is an example post with TikZ code. TikZJax converts script tags (containing TikZ code) into SVGs.</p> <script type="text/tikz">
\begin{tikzpicture}
    \draw[red,fill=black!60!red] (0,0) circle [radius=1.5];
    \draw[green,fill=black!60!green] (0,0) circle [x radius=1.5cm, y radius=10mm];
    \draw[blue,fill=black!60!blue] (0,0) circle [x radius=1cm, y radius=5mm, rotate=30];
\end{tikzpicture}
</script>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included TikZ code could look like]]></summary></entry><entry><title type="html">a post with bibliography</title><link href="https://carljohanrehn.github.io/allehanda/blog/2023/post-bibliography/" rel="alternate" type="text/html" title="a post with bibliography"/><published>2023-07-12T13:56:00+00:00</published><updated>2023-07-12T13:56:00+00:00</updated><id>https://carljohanrehn.github.io/allehanda/blog/2023/post-bibliography</id><content type="html" xml:base="https://carljohanrehn.github.io/allehanda/blog/2023/post-bibliography/"><![CDATA[<p>This post shows how to add bibliography to simple blog posts. If you would like something more academic, check the <a href="/allehanda/blog/2021/distill/">distill style post</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="bib"/><summary type="html"><![CDATA[an example of a blog post with bibliography]]></summary></entry><entry><title type="html">a post with jupyter notebook</title><link href="https://carljohanrehn.github.io/allehanda/blog/2023/jupyter-notebook/" rel="alternate" type="text/html" title="a post with jupyter notebook"/><published>2023-07-04T12:57:00+00:00</published><updated>2023-07-04T12:57:00+00:00</updated><id>https://carljohanrehn.github.io/allehanda/blog/2023/jupyter-notebook</id><content type="html" xml:base="https://carljohanrehn.github.io/allehanda/blog/2023/jupyter-notebook/"><![CDATA[<p>To include a jupyter notebook in a post, you can use the following code:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{::nomarkdown}
{% assign jupyter_path = "assets/jupyter/blog.ipynb" | relative_url %}
{% capture notebook_exists %}{% file_exists assets/jupyter/blog.ipynb %}{% endcapture %}
{% if notebook_exists == "true" %}
    {% jupyter_notebook jupyter_path %}
{% else %}
    <span class="nt">&lt;p&gt;</span>Sorry, the notebook you are looking for does not exist.<span class="nt">&lt;/p&gt;</span>
{% endif %}
{:/nomarkdown}
</code></pre></div></div> <p>Let’s break it down: this is possible thanks to <a href="https://github.com/red-data-tools/jekyll-jupyter-notebook">Jekyll Jupyter Notebook plugin</a> that allows you to embed jupyter notebooks in your posts. It basically calls <a href="https://nbconvert.readthedocs.io/en/latest/usage.html#convert-html"><code class="language-plaintext highlighter-rouge">jupyter nbconvert --to html</code></a> to convert the notebook to an html page and then includes it in the post. Since <a href="https://jekyllrb.com/docs/configuration/markdown/">Kramdown</a> is the default Markdown renderer for Jekyll, we need to surround the call to the plugin with the <a href="https://kramdown.gettalong.org/syntax.html#extensions">::nomarkdown</a> tag so that it stops processing this part with Kramdown and outputs the content as-is.</p> <p>The plugin takes as input the path to the notebook, but it assumes the file exists. If you want to check if the file exists before calling the plugin, you can use the <code class="language-plaintext highlighter-rouge">file_exists</code> filter. This avoids getting a 404 error from the plugin and ending up displaying the main page inside of it instead. If the file does not exist, you can output a message to the user. The code displayed above outputs the following:</p> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/allehanda/assets/jupyter/blog.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div> <p>Note that the jupyter notebook supports both light and dark themes.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="jupyter"/><summary type="html"><![CDATA[an example of a blog post with jupyter notebook]]></summary></entry><entry><title type="html">a post with custom blockquotes</title><link href="https://carljohanrehn.github.io/allehanda/blog/2023/custom-blockquotes/" rel="alternate" type="text/html" title="a post with custom blockquotes"/><published>2023-05-12T19:53:00+00:00</published><updated>2023-05-12T19:53:00+00:00</updated><id>https://carljohanrehn.github.io/allehanda/blog/2023/custom-blockquotes</id><content type="html" xml:base="https://carljohanrehn.github.io/allehanda/blog/2023/custom-blockquotes/"><![CDATA[<p>This post shows how to add custom styles for blockquotes. Based on <a href="https://github.com/sighingnow/jekyll-gitbook">jekyll-gitbook</a> implementation.</p> <p>We decided to support the same custom blockquotes as in <a href="https://sighingnow.github.io/jekyll-gitbook/jekyll/2022-06-30-tips_warnings_dangers.html">jekyll-gitbook</a>, which are also found in a lot of other sites’ styles. The styles definitions can be found on the <a href="https://github.com/alshedivat/al-folio/blob/master/_sass/_base.scss">_base.scss</a> file, more specifically:</p> <div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* Tips, warnings, and dangers */</span>
<span class="nc">.post</span> <span class="nc">.post-content</span> <span class="nt">blockquote</span> <span class="p">{</span>
    <span class="k">&amp;</span><span class="nc">.block-tip</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span> <span class="nt">h2</span><span class="o">,</span> <span class="nt">h3</span><span class="o">,</span> <span class="nt">h4</span><span class="o">,</span> <span class="nt">h5</span><span class="o">,</span> <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">&amp;</span><span class="nc">.block-warning</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span> <span class="nt">h2</span><span class="o">,</span> <span class="nt">h3</span><span class="o">,</span> <span class="nt">h4</span><span class="o">,</span> <span class="nt">h5</span><span class="o">,</span> <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">&amp;</span><span class="nc">.block-danger</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span> <span class="nt">h2</span><span class="o">,</span> <span class="nt">h3</span><span class="o">,</span> <span class="nt">h4</span><span class="o">,</span> <span class="nt">h5</span><span class="o">,</span> <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>A regular blockquote can be used as following:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; This is a regular blockquote</span>
<span class="gt">&gt; and it can be used as usual</span>
</code></pre></div></div> <blockquote> <p>This is a regular blockquote and it can be used as usual</p> </blockquote> <p>These custom styles can be used by adding the specific class to the blockquote, as follows:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### TIP</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; A tip can be used when you want to give advice</span>
<span class="gt">&gt; related to a certain content.</span>
{: .block-tip }
</code></pre></div></div> <blockquote class="block-tip"> <h5 id="tip">TIP</h5> <p>A tip can be used when you want to give advice related to a certain content.</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### WARNING</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a warning, and thus should</span>
<span class="gt">&gt; be used when you want to warn the user</span>
{: .block-warning }
</code></pre></div></div> <blockquote class="block-warning"> <h5 id="warning">WARNING</h5> <p>This is a warning, and thus should be used when you want to warn the user</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### DANGER</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a danger zone, and thus should</span>
<span class="gt">&gt; be used carefully</span>
{: .block-danger }
</code></pre></div></div> <blockquote class="block-danger"> <h5 id="danger">DANGER</h5> <p>This is a danger zone, and thus should be used carefully</p> </blockquote>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="blockquotes"/><summary type="html"><![CDATA[an example of a blog post with custom blockquotes]]></summary></entry><entry><title type="html">a post with table of contents on a sidebar</title><link href="https://carljohanrehn.github.io/allehanda/blog/2023/sidebar-table-of-contents/" rel="alternate" type="text/html" title="a post with table of contents on a sidebar"/><published>2023-04-25T14:14:00+00:00</published><updated>2023-04-25T14:14:00+00:00</updated><id>https://carljohanrehn.github.io/allehanda/blog/2023/sidebar-table-of-contents</id><content type="html" xml:base="https://carljohanrehn.github.io/allehanda/blog/2023/sidebar-table-of-contents/"><![CDATA[<p>This post shows how to add a table of contents as a sidebar.</p> <h2 id="adding-a-table-of-contents">Adding a Table of Contents</h2> <p>To add a table of contents to a post as a sidebar, simply add</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">sidebar</span><span class="pi">:</span> <span class="s">left</span>
</code></pre></div></div> <p>to the front matter of the post. The table of contents will be automatically generated from the headings in the post. If you wish to display the sidebar to the right, simply change <code class="language-plaintext highlighter-rouge">left</code> to <code class="language-plaintext highlighter-rouge">right</code>.</p> <h3 id="example-of-sub-heading-1">Example of Sub-Heading 1</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h3 id="example-of-another-sub-heading-1">Example of another Sub-Heading 1</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h2 data-toc-text="Customizing" id="customizing-your-table-of-contents">Customizing Your Table of Contents</h2> <p>If you want to learn more about how to customize the table of contents of your sidebar, you can check the <a href="https://afeld.github.io/bootstrap-toc/">bootstrap-toc</a> documentation. Notice that you can even customize the text of the heading that will be displayed on the sidebar.</p> <h3 id="example-of-sub-heading-2">Example of Sub-Heading 2</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h3 id="example-of-another-sub-heading-2">Example of another Sub-Heading 2</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="toc"/><category term="sidebar"/><summary type="html"><![CDATA[an example of a blog post with table of contents on a sidebar]]></summary></entry><entry><title type="html">a post with audios</title><link href="https://carljohanrehn.github.io/allehanda/blog/2023/audios/" rel="alternate" type="text/html" title="a post with audios"/><published>2023-04-25T10:25:00+00:00</published><updated>2023-04-25T10:25:00+00:00</updated><id>https://carljohanrehn.github.io/allehanda/blog/2023/audios</id><content type="html" xml:base="https://carljohanrehn.github.io/allehanda/blog/2023/audios/"><![CDATA[<p>This is an example post with audios. It supports local audio files.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/allehanda/assets/audio/epicaly-short-113909.mp3" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="https://cdn.pixabay.com/download/audio/2022/06/25/audio_69a61cd6d6.mp3" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="audios"/><summary type="html"><![CDATA[this is what included audios could look like]]></summary></entry><entry><title type="html">a post with videos</title><link href="https://carljohanrehn.github.io/allehanda/blog/2023/videos/" rel="alternate" type="text/html" title="a post with videos"/><published>2023-04-24T21:01:00+00:00</published><updated>2023-04-24T21:01:00+00:00</updated><id>https://carljohanrehn.github.io/allehanda/blog/2023/videos</id><content type="html" xml:base="https://carljohanrehn.github.io/allehanda/blog/2023/videos/"><![CDATA[<p>This is an example post with videos. It supports local video files.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/allehanda/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/allehanda/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div> <p>It does also support embedding videos from different sources. Here are some examples:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://www.youtube.com/embed/jNQXAC9IVRw" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://player.vimeo.com/video/524933864?h=1ac4fd9fb4&amp;title=0&amp;byline=0&amp;portrait=0" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> </div>]]></content><author><name></name></author><category term="sample-posts"/><category term="including"/><category term="videos"/><summary type="html"><![CDATA[this is what included videos could look like]]></summary></entry><entry><title type="html">Cross Python Development with Rootless Podman Part 1</title><link href="https://carljohanrehn.github.io/allehanda/blog/2023/python-package-part-2/" rel="alternate" type="text/html" title="Cross Python Development with Rootless Podman Part 1"/><published>2023-04-23T13:59:42+00:00</published><updated>2023-04-23T13:59:42+00:00</updated><id>https://carljohanrehn.github.io/allehanda/blog/2023/python-package-part-2</id><content type="html" xml:base="https://carljohanrehn.github.io/allehanda/blog/2023/python-package-part-2/"><![CDATA[<p>In this post I’ll describe a Podman <a href="https://docs.podman.io/en/stable/markdown/podman-build.1.html">Containerfile</a> in which we create a rootless cross <a href="https://www.python.org/">Python</a> development environment. It is based on a <a href="https://gist.github.com/BrutalSimplicity/882af1d343b7530fc7e005284523d38d">Gist on GitHub</a> published by “BrutalSimplicity” and Dane Hillard’s book <a href="https://www.manning.com/books/publishing-python-packages">Publishing Python Packages</a>. Furthermore, it contains a full <a href="https://www.ruby-lang.org/en/">Ruby</a> installation (necessary for creating <a href="https://jekyllrb.com/">Jekyll</a> static webpages and blog posts, and <a href="https://pages.github.com/">GitHub Pages</a>). Thus,</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> debian:bullseye</span>
<span class="k">USER</span><span class="s"> root</span>

<span class="c"># note: use with care</span>
<span class="k">ARG</span><span class="s"> DEBIAN_FRONTEND=noninteractive</span>

<span class="k">LABEL</span><span class="s"> maintainer="Carl Johan Rehn &lt;care02@gmail.com&gt;"</span>
<span class="k">LABEL</span><span class="s"> updated_at=2023-03-06</span>

<span class="k">RUN </span>apt-get clean <span class="o">&amp;&amp;</span> <span class="se">\
</span>    apt-get update 
</code></pre></div></div> <p>Add locale and a time zone (check in running container with <code class="language-plaintext highlighter-rouge">$TZ</code>, <code class="language-plaintext highlighter-rouge">date</code>, and <code class="language-plaintext highlighter-rouge">locale</code>), see question on <a href="https://stackoverflow.com/questions/28405902/how-to-set-the-locale-inside-a-debian-ubuntu-docker-container">stackoverflow</a> and Jiménez’s <a href="https://gist.github.com/sjimenez44/1b73afeae3eec26a1915b0d4d5873b8f">Gist on GitHub</a></p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">RUN </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> locales locales-all tzdata

<span class="k">RUN </span><span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'/en_US.UTF-8/s/^# //g'</span> /etc/locale.gen <span class="o">&amp;&amp;</span> <span class="se">\
</span>    locale-gen
<span class="k">ENV</span><span class="s"> LANG en_US.UTF-8</span>
<span class="k">ENV</span><span class="s"> LANGUAGE en_US:en</span>
<span class="k">ENV</span><span class="s"> LC_ALL en_US.UTF-8</span>
<span class="c"># ENV TZ="America/New_York"</span>
</code></pre></div></div> <p>For local language settings, change accordingly</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># RUN sed -i '/sv_SE.UTF-8/s/^# //g' /etc/locale.gen &amp;&amp; \</span>
<span class="c">#     locale-gen</span>
<span class="c"># ENV LANG sv_SE.UTF-8</span>
<span class="c"># ENV LANGUAGE sv_SE:sv</span>
<span class="c"># ENV LC_ALL sv_SE.UTF-8</span>
<span class="k">ENV</span><span class="s"> TZ="Europe/Stockholm"</span>
</code></pre></div></div> <p>Install basic development packages, see BrutalSimplicity’s <a href="https://gist.github.com/BrutalSimplicity/882af1d343b7530fc7e005284523d38d">Gist on GitHub</a></p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">RUN </span>apt-get <span class="nt">-y</span> <span class="nb">install</span> <span class="nt">--no-install-recommends</span> <span class="se">\
</span>    apt-utils <span class="se">\
</span>    openssh-client <span class="se">\
</span>    git <span class="se">\
</span>    gnupg2 <span class="se">\
</span>    dirmngr <span class="se">\
</span>    iproute2 <span class="se">\
</span>    procps <span class="se">\
</span>    lsof <span class="se">\
</span>    htop <span class="se">\
</span>    net-tools <span class="se">\
</span>    psmisc <span class="se">\
</span>    curl <span class="se">\
</span>    wget <span class="se">\
</span>    rsync <span class="se">\
</span>    ca-certificates <span class="se">\
</span>    unzip <span class="se">\
</span>    zip <span class="se">\
</span>    nano <span class="se">\
</span>    vim <span class="se">\
</span>    neovim <span class="se">\
</span>    emacs-nox <span class="se">\
</span>    less <span class="se">\
</span>    jq <span class="se">\
</span>    lsb-release <span class="se">\
</span>    apt-transport-https <span class="se">\
</span>    dialog <span class="se">\
</span>    libc6 <span class="se">\
</span>    libgcc1 <span class="se">\
</span>    libgcc1 <span class="se">\
</span>    libkrb5-3 <span class="se">\
</span>    libgssapi-krb5-2 <span class="se">\
</span>    libicu[0-9][0-9] <span class="se">\
</span>    libstdc++6 <span class="se">\
</span>    zlib1g <span class="se">\
</span>    locales <span class="se">\
</span>    <span class="nb">sudo</span> <span class="se">\
</span>    ncdu <span class="se">\
</span>    man-db <span class="se">\
</span>    strace <span class="se">\
</span>    manpages <span class="se">\
</span>    manpages-dev <span class="se">\
</span>    init-system-helpers <span class="se">\
</span>    make <span class="se">\
</span>    build-essential <span class="se">\
</span></code></pre></div></div> <p>Also, install Python runtime dependencies</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    openssl \
    bzip2 \
    libreadline8 \
    sqlite3 \
    tk \
    xz-utils \
    libxml2 \
    llvm \
</code></pre></div></div> <p>and Python and Ruby build dependencies</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    libssl-dev \
    zlib1g-dev \
    libbz2-dev \
    libreadline-dev \
    libsqlite3-dev \
    libncursesw5-dev \
    tk-dev \
    libxml2-dev \
    libxmlsec1-dev \
    libffi-dev \
    liblzma-dev \
</code></pre></div></div> <p>Install useful development utilities</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    fd-find \
    bat \
    tree \
    zsh \
</code></pre></div></div> <p>and additional tools</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    pandoc \
    imagemagick &amp;&amp; \
</code></pre></div></div> <p>Add soft links</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    ln -s $(which fdfind) /usr/local/bin/fd &amp;&amp; \
    ln -s $(which batcat) /usr/local/bin/bat
</code></pre></div></div> <p>Install Ruby (which is required for Jekyll)</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">RUN </span>apt-get <span class="nb">install</span> <span class="nt">--no-install-recommends</span> ruby-full <span class="nt">-y</span>
</code></pre></div></div> <p>Clean up</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">RUN </span>apt-get clean <span class="o">&amp;&amp;</span> <span class="se">\
</span>    <span class="nb">rm</span> <span class="nt">-rf</span> /var/lib/apt/lists/
</code></pre></div></div> <p>Use bash for all <code class="language-plaintext highlighter-rouge">RUN</code> commands</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SHELL</span><span class="s"> ["/bin/bash", "-lc"]</span>
</code></pre></div></div> <p>Install <a href="https://python-launcher.app/">python-launcher</a> (requires root)</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">RUN </span>curl <span class="nt">--location</span> <span class="nt">--remote-name</span> https://github.com/brettcannon/python-launcher/releases/download/v1.0.0/python_launcher-1.0.0-x86_64-unknown-linux-gnu.tar.xz <span class="o">&amp;&amp;</span> <span class="se">\
</span>    <span class="nb">tar</span> <span class="nt">--extract</span> <span class="nt">--strip-components</span> 1 <span class="nt">--directory</span> /usr/local <span class="nt">--file</span> python_launcher-1.0.0-x86_64-unknown-linux-gnu.tar.xz <span class="o">&amp;&amp;</span> <span class="se">\
</span>    <span class="nb">rm </span>python_launcher-1.0.0-x86_64-unknown-linux-gnu.tar.xz
</code></pre></div></div> <p>For hints on how to set up a rootless Podman image, see <a href="https://pythonspeed.com/articles/root-capabilities-docker-security/">Python Speed</a> and questions on <a href="https://stackoverflow.com/questions/59840450/rootless-docker-image">stackoverflow</a>.</p> <p>Create a non-root user and set a working directory</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">RUN </span>useradd <span class="nt">--create-home</span> app
<span class="k">USER</span><span class="s"> app</span>
<span class="k">WORKDIR</span><span class="s"> /home/app</span>
</code></pre></div></div> <p>Install <a href="https://asdf-vm.com/">The Multiple Runtime Version Manager</a>, that is, <a href="https://github.com/asdf-vm/asdf">asdf</a></p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">RUN </span>git clone https://github.com/asdf-vm/asdf.git <span class="nv">$HOME</span>/.asdf <span class="nt">--branch</span> v0.11.1 <span class="o">&amp;&amp;</span> <span class="se">\
</span>    <span class="nb">echo</span> <span class="s2">". </span><span class="nv">$HOME</span><span class="s2">/.asdf/asdf.sh"</span> <span class="o">&gt;&gt;</span> <span class="nv">$HOME</span>/.bashrc <span class="o">&amp;&amp;</span> <span class="se">\
</span>    <span class="nb">echo</span> <span class="s2">". </span><span class="nv">$HOME</span><span class="s2">/.asdf/asdf.sh"</span> <span class="o">&gt;&gt;</span> <span class="nv">$HOME</span>/.profile
</code></pre></div></div> <p>and asdf’s Python plugin.</p> <p>Build and install python (note: asdf builds from source); and set the global Python version</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">RUN </span>asdf plugin add python <span class="o">&amp;&amp;</span> <span class="se">\
</span>    asdf <span class="nb">install </span>python 3.10.8
    asdf global python 3.10.8
</code></pre></div></div> <p>Upgrade <a href="https://pypi.org/project/pip/">pip</a>, the python package manager</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">RUN </span>pip <span class="nb">install</span> <span class="nt">--upgrade</span> pip
</code></pre></div></div> <p>Install <a href="https://github.com/pypa/pipx/">pipx</a></p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">RUN </span>py <span class="nt">-3</span>.10 <span class="nt">-m</span> pip <span class="nb">install </span>pipx <span class="o">&amp;&amp;</span> <span class="se">\
</span>    asdf reshim python <span class="o">&amp;&amp;</span> <span class="se">\
</span>    pipx ensurepath
</code></pre></div></div> <p>Install <a href="https://github.com/pypa/build">build</a>, <a href="https://tox.wiki/en/latest/">tox</a>, <a href="https://pre-commit.com/">pre-commit</a>, and <a href="https://cookiecutter.readthedocs.io/">cookiecutter</a> (see <a href="https://www.manning.com/books/publishing-python-packages">Publishing Python Packages</a>)</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">RUN </span>pipx <span class="nb">install </span>build <span class="o">&amp;&amp;</span> <span class="se">\
</span>    pipx <span class="nb">install </span>tox <span class="o">&amp;&amp;</span> <span class="se">\
</span>    pipx <span class="nb">install </span>pre-commit <span class="o">&amp;&amp;</span> <span class="se">\
</span>    pipx <span class="nb">install </span>cookiecutter
</code></pre></div></div> <p>Optional: add accompanying code</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">RUN </span><span class="nb">mkdir </span>references <span class="o">&amp;&amp;</span> <span class="se">\
</span>    git clone https://github.com/daneah/publishing-python-packages.git <span class="o">&amp;&amp;</span> <span class="se">\
</span>    <span class="nb">mv </span>publishing-python-packages references/publishing-python-packages
</code></pre></div></div> <p>Let’s build an image with Podman (remember to use use the <a href="https://github.com/containers/podman/issues/8477">format</a> docker flag; the <a href="https://docs.podman.io/en/latest/markdown/podman-build.1.html">no-cache</a> flag is optional). Hence,</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman image build <span class="nt">--no-cache</span> <span class="nt">--format</span> docker <span class="nt">-f</span> Containerfile-pydev-jekyll <span class="nt">-t</span> pydev-jekyll <span class="nb">.</span>
</code></pre></div></div> <p>Now, create a container</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman container run <span class="nt">-it</span> pydev-jekyll
</code></pre></div></div> <p>and check that Python is available</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>app@8a709f7db41a:~<span class="nv">$ </span>py
Python 3.10.8 <span class="o">(</span>main, Apr 11 2023, 11:43:31<span class="o">)</span> <span class="o">[</span>GCC 10.2.1 20210110] on linux
Type <span class="s2">"help"</span>, <span class="s2">"copyright"</span>, <span class="s2">"credits"</span> or <span class="s2">"license"</span> <span class="k">for </span>more information.
<span class="o">&gt;&gt;&gt;</span> import sys
<span class="o">&gt;&gt;&gt;</span> sys.executable
<span class="s1">'/home/app/.asdf/installs/python/3.10.8/bin/python3.10'</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Cross Python Development"/><category term="Python"/><category term="Jekyll"/><category term="Podman"/><summary type="html"><![CDATA[In this post I’ll describe a Podman Containerfile in which we create a rootless cross Python development environment. It is based on a Gist on GitHub published by “BrutalSimplicity” and Dane Hillard’s book Publishing Python Packages. Furthermore, it contains a full Ruby installation (necessary for creating Jekyll static webpages and blog posts, and GitHub Pages). Thus,]]></summary></entry><entry><title type="html">Jekyll Python Package Part 2</title><link href="https://carljohanrehn.github.io/allehanda/blog/2023/jekyll-python-package-part-2/" rel="alternate" type="text/html" title="Jekyll Python Package Part 2"/><published>2023-04-16T10:20:25+00:00</published><updated>2023-04-16T10:20:25+00:00</updated><id>https://carljohanrehn.github.io/allehanda/blog/2023/jekyll-python-package-part-2</id><content type="html" xml:base="https://carljohanrehn.github.io/allehanda/blog/2023/jekyll-python-package-part-2/"><![CDATA[<hr/> <ul> <li>Location: ~/my-pak/cross-python-development/torch-app-docker/</li> <li>File: docker-compose-pypak-jekyll.yml</li> </ul> <hr/> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># https://github.com/compose-spec/compose-spec</span>
<span class="c"># https://github.com/compose-spec/compose-spec/blob/master/spec.md#volumes-top-level-element</span>
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker compose <span class="nt">-f</span> docker-compose-pypak-jekyll.yml run publish
docker compose <span class="nt">-f</span> docker-compose-pypak-jekyll.yml up notebook
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># https://github.com/containers/podman-compose</span>
<span class="c"># https://www.redhat.com/sysadmin/podman-compose-docker-compose</span>
<span class="c"># https://www.redhat.com/sysadmin/compose-kubernetes-podman</span>
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># https://linuxhandbook.com/podman-compose/</span>
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman-compose <span class="nt">-f</span> docker-compose-pypak-jekyll.yml run publish
podman-compose <span class="nt">-f</span> docker-compose-pypak-jekyll.yml up notebook
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># alias docker=podman</span>
docker-compose <span class="nt">-f</span> docker-compose-pypak-jekyll.yml run publish
docker-compose <span class="nt">-f</span> docker-compose-pypa-jekyllk.yml up notebook
</code></pre></div></div> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3.9"</span>

<span class="na">services</span><span class="pi">:</span>

  <span class="na">publish</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span>
      <span class="s">pypak-jekyll</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">.:/home/app/project:Z</span>  <span class="c1"># Note: PyCharm maps '.' to /opt/project/ with environment variable IDE_PROJECT_ROOTS</span>

  <span class="na">notebook</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span>
      <span class="s">pypak-jekyll</span>
    <span class="na">entrypoint</span><span class="pi">:</span>
      <span class="s">py -m jupyter lab --no-browser --ip=0.0.0.0 --port=8888 --notebook-dir=/home/app --NotebookApp.token='' --NotebookApp.password=''</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">.:/home/app/project:Z</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">8888:8888</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="fries-al-folio"/><category term="Jekyll,"/><category term="Podman"/><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Cross Python Development with Rootless Podman Part 2</title><link href="https://carljohanrehn.github.io/allehanda/blog/2023/jekyll-python-package-part-1/" rel="alternate" type="text/html" title="Cross Python Development with Rootless Podman Part 2"/><published>2023-04-15T21:32:08+00:00</published><updated>2023-04-15T21:32:08+00:00</updated><id>https://carljohanrehn.github.io/allehanda/blog/2023/jekyll-python-package-part-1</id><content type="html" xml:base="https://carljohanrehn.github.io/allehanda/blog/2023/jekyll-python-package-part-1/"><![CDATA[<p>This post continues where we left off in <a href="https://carljohanrehn.github.io/allehanda/blog/2023/python-package-part-2/">Cross Python Development with Rootless Podman Part 1</a>. Here you’ll see how to create a Python virtual environment for a specific project of yours, and how to activate it.</p> <p>Always set a working directory</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> pydev-jekyll</span>
<span class="k">USER</span><span class="s"> app</span>
<span class="k">WORKDIR</span><span class="s"> /home/app</span>
</code></pre></div></div> <p>Create virtual environment (and delete existing if it exists) using a <code class="language-plaintext highlighter-rouge">requirements.txt</code> file</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">COPY</span><span class="s"> requirements.txt .</span>

<span class="k">RUN </span>py <span class="nt">-3</span>.10 <span class="nt">-m</span> venv /home/app/virtualenv/.venv <span class="o">&amp;&amp;</span> <span class="se">\
</span>    /home/app/virtualenv/.venv/bin/pip <span class="nb">install</span> <span class="nt">--upgrade</span> pip <span class="o">&amp;&amp;</span> <span class="se">\
</span>    /home/app/virtualenv/.venv/bin/pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt <span class="o">&amp;&amp;</span> <span class="se">\
</span>    <span class="nb">rm </span>requirements.txt
</code></pre></div></div> <p>For instance, my <code class="language-plaintext highlighter-rouge">requirements.txt</code> file contains the following</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--extra-index-url https://download.pytorch.org/whl/cpu
# --extra-index-url https://files.pythonhosted.org/packages/86/cc/f2685fc3fc37122fe8be22e6c0dfdaeab49026625b8c2cf41bc87b1cdd4d
# https://files.pythonhosted.org/packages/80/5e/f095ccdf24860a7548b39f93d2df03017ad3218f90a0406feb5e5661d0c7/scikit_learn-1.2.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl
# https://files.pythonhosted.org/packages/80/53/47bed2190d2d86914223454f69744553521bc20c7de922d6a3b5300316ab/scikit_learn-1.2.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl
seaborn&gt;=0.12.2
matplotlib&gt;=3.6.2
numpy&gt;=1.23.5
tqdm&gt;=4.64
pandas&gt;=1.5.2
# sklearn
scikit-learn
torch
torchvision
torchaudio
# torch-cpu
# torchvision-cpu
# torchaudio-cpu
ipython
jupyter
jupyterlab
</code></pre></div></div> <p>Activate your virtual environment</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">RUN </span><span class="nb">source</span> /home/app/virtualenv/.venv/bin/activate
</code></pre></div></div> <p>Install with source package (<em>.tar.gz) or wheel (</em>.whl). Python version optional with tar.gz package; otherwise, needs to be specified when using wheel</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">RUN </span>py <span class="nt">-3</span>.10 <span class="nt">-m</span> venv /home/app/torch-app/.venv <span class="o">&amp;&amp;</span> <span class="se">\
</span>    /home/app/torch-app/.venv/bin/pip <span class="nb">install</span> <span class="nt">--upgrade</span> pip <span class="o">&amp;&amp;</span> <span class="se">\
</span>    /home/app/torch-app/.venv/bin/pip <span class="nb">install</span> /home/app/project/dist/torch-app-0.0.1.tar.gz
<span class="c">#     /home/app/torch-app/.venv/bin/pip install /home/app/project/dist/torch_app-0.0.1-non-any.whl</span>
</code></pre></div></div> <p>Special for PyTorch CPU version with source or binary package installation, see README.md</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">RUN </span>py <span class="nt">-m</span> pip <span class="nb">install </span>torch torchvision torchaudio <span class="nt">--extra-index-url</span> https://download.pytorch.org/whl/cpu
</code></pre></div></div> <p>Optional: add accompanying code (from book “Inside Deep Learning”)</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">RUN </span>git clone https://github.com/EdwardRaff/Inside-Deep-Learning.git <span class="o">&amp;&amp;</span> <span class="se">\
</span>    <span class="nb">mv </span>Inside-Deep-Learning references/inside-deep-learning
</code></pre></div></div> <p>Clone other books here…</p> <p>Jupyter notebook (or lab); set entrypoint in docker compose file</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CMD</span><span class="s"> py -m notebook --no-browser --allow-root --ip=0.0.0.0 --port=8888 --notebook-dir=/home/app --NotebookApp.token='' --NotebookApp.password=''</span>
<span class="c"># CMD py -m jupyter lab --no-browser --ip=0.0.0.0 --port=8888 --notebook-dir=/home/app --NotebookApp.token='' --NotebookApp.password=''</span>
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman image build <span class="nt">--no-cache</span> <span class="nt">--format</span> docker <span class="nt">-f</span> Containerfile-pypak-jekyll <span class="nt">-t</span> pypak-jekyll <span class="nb">.</span>
podman image build <span class="nt">--format</span> docker <span class="nt">-f</span> Containerfile-pypak-jekyll <span class="nt">-t</span> pypak-jekyll <span class="nb">.</span>
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman container run <span class="nt">-it</span> pypak-jekyll
podman container run <span class="nt">-it</span> <span class="nt">--rm</span> pypak-jekyll
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># https://github.com/containers/podman/issues/3683</span>
<span class="c"># https://unix.stackexchange.com/questions/728801/host-wide-consequences-of-setting-selinux-z-z-option-on-container-bind-mounts</span>
<span class="c"># https://manpages.ubuntu.com/manpages/jammy/man1/docker-container-create.1.html</span>
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman container run <span class="nt">-it</span> <span class="nt">--rm</span> <span class="nt">-v</span> .:/home/app/torch-app:Z pypak-jekyll
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker image build <span class="nt">-f</span> Containerfile-pypak-jekyll <span class="nt">-t</span> pypak-jekyll <span class="nb">.</span>
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker container run <span class="nt">-it</span> pypak-jekyll
docker container run <span class="nt">-it</span> <span class="nt">--rm</span> pypak-jekyll
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Jupyter notebook port mapping</span>
docker container run <span class="nt">-it</span> <span class="nt">-p</span> 8888:8888 pypak-jekyll
</code></pre></div></div>]]></content><author><name></name></author><category term="Cross Python Development"/><category term="Python"/><category term="Jekyll"/><category term="Podman"/><summary type="html"><![CDATA[This post continues where we left off in Cross Python Development with Rootless Podman Part 1. Here you’ll see how to create a Python virtual environment for a specific project of yours, and how to activate it.]]></summary></entry></feed>