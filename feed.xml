<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://carljohanrehn.github.io/allehanda/feed.xml" rel="self" type="application/atom+xml"/><link href="https://carljohanrehn.github.io/allehanda/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-01-21T10:02:37+00:00</updated><id>https://carljohanrehn.github.io/allehanda/feed.xml</id><title type="html">Allehanda</title><entry><title type="html">Running Jekyll in a Rootless Podman Container: Part 3 - Reproducible Development and Testing</title><link href="https://carljohanrehn.github.io/allehanda/blog/2025/jekyll-podman-rootless-part-3/" rel="alternate" type="text/html" title="Running Jekyll in a Rootless Podman Container: Part 3 - Reproducible Development and Testing"/><published>2025-01-20T10:53:48+00:00</published><updated>2025-01-20T10:53:48+00:00</updated><id>https://carljohanrehn.github.io/allehanda/blog/2025/jekyll-podman-rootless-part-3</id><content type="html" xml:base="https://carljohanrehn.github.io/allehanda/blog/2025/jekyll-podman-rootless-part-3/"><![CDATA[<p>Welcome to the third and final part of our series on running Jekyll in a rootless Podman container! In this post, we’ll focus on creating a reproducible workflow for testing and development using <strong><code class="language-plaintext highlighter-rouge">podman-compose</code></strong>. This approach simplifies the process of managing containers and makes it easier to build, test, and debug your Jekyll projects.</p> <p>If you’re new to this series, be sure to catch up on <a href="https://carljohanrehn.github.io/allehanda/blog/2025/jekyll-podman-rootless-part-1/">Part 1</a> and <a href="https://carljohanrehn.github.io/allehanda/blog/2025/jekyll-podman-rootless-part-2/">Part 2</a>, where we covered the basics of rootless Podman environments and file ownership considerations. Let’s dive in!</p> <hr/> <h2 id="why-use-podman-compose">Why Use <code class="language-plaintext highlighter-rouge">podman-compose</code>?</h2> <p>In previous posts, we manually used Podman commands to run and stop containers. While this works, managing containers through a <strong><code class="language-plaintext highlighter-rouge">podman-compose</code></strong> workflow offers several benefits:</p> <ul> <li><strong>Reproducibility</strong>: Ensures the same environment every time you spin up your containers.</li> <li><strong>Ease of Use</strong>: A single command can bring up or tear down the entire development environment.</li> <li><strong>Scalability</strong>: Quickly add other services to your environment if needed.</li> </ul> <p>To show how this works, we’ll utilize the following <code class="language-plaintext highlighter-rouge">docker-compose</code>-compatible file: <strong><code class="language-plaintext highlighter-rouge">docker-compose-project-podman.yml</code></strong>.</p> <hr/> <h2 id="understanding-the-compose-file">Understanding the Compose File</h2> <p>Here’s an example <code class="language-plaintext highlighter-rouge">docker-compose-project-podman.yml</code> used for our Jekyll container:</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3"</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">jekyll</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">pypak-jekyll-srv</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">al-folio-website</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">bash -c "</span>
      <span class="s">rm -f Gemfile.lock</span>
      <span class="s">&amp;&amp; bundler exec jekyll serve --watch --port=8080 --host=0.0.0.0 --livereload --verbose --trace"</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">8080:8080</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">../../..:/home/app/project:Z</span>
      <span class="pi">-</span> <span class="s">.:/home/app/srv/jekyll:Z</span>
</code></pre></div></div> <h3 id="key-sections-of-the-compose-file">Key Sections of the Compose File:</h3> <ol> <li> <p><strong>Version</strong>:<br/> The <code class="language-plaintext highlighter-rouge">version: "3"</code> line specifies the Docker Compose file format.</p> </li> <li> <p><strong>Services</strong>:<br/> Defines our containerized tasks, which in this case is the <strong><code class="language-plaintext highlighter-rouge">jekyll</code></strong> service.</p> </li> <li> <p><strong>Image</strong>:<br/> The image <strong><code class="language-plaintext highlighter-rouge">pypak-jekyll-srv</code></strong> contains our Jekyll runtime.</p> </li> <li><strong>Command</strong>:<br/> This shell command ensures a clean state (<code class="language-plaintext highlighter-rouge">rm -f Gemfile.lock</code>) and runs the Jekyll server with options like: <ul> <li><code class="language-plaintext highlighter-rouge">--watch</code>: Watches for file changes.</li> <li><code class="language-plaintext highlighter-rouge">--port=8080</code>: Exposes the server on port 8080.</li> <li><code class="language-plaintext highlighter-rouge">--host=0.0.0.0</code>: Opens the server to all interfaces.</li> <li><code class="language-plaintext highlighter-rouge">--livereload</code>: Enables automatic browser reloads for a better dev experience.</li> <li><code class="language-plaintext highlighter-rouge">--verbose</code> and <code class="language-plaintext highlighter-rouge">--trace</code>: Helpful for debugging.</li> </ul> </li> <li> <p><strong>Ports</strong>:<br/> Maps port <code class="language-plaintext highlighter-rouge">8080</code> inside the container to port <code class="language-plaintext highlighter-rouge">8080</code> on your local machine.</p> </li> <li><strong>Volumes</strong>:<br/> Mounts host directories into the container for easy file access: <ul> <li><code class="language-plaintext highlighter-rouge">../../..:/home/app/project:Z</code>: Maps a higher-level directory to <code class="language-plaintext highlighter-rouge">/home/app/project</code> in the container.</li> <li><code class="language-plaintext highlighter-rouge">.:/home/app/srv/jekyll:Z</code>: Maps the current directory to <code class="language-plaintext highlighter-rouge">/home/app/srv/jekyll</code>.</li> </ul> </li> </ol> <hr/> <h2 id="running-jekyll-with-podman-compose">Running Jekyll with <code class="language-plaintext highlighter-rouge">podman-compose</code></h2> <h3 id="step-1-start-the-service">Step 1: Start the Service</h3> <p>Use this command to spin up the Jekyll container:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman-compose <span class="nt">-f</span> docker-compose-project-podman.yml up
</code></pre></div></div> <p>Once the container is running, you can view your Jekyll website locally by navigating to:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://localhost:8080
</code></pre></div></div> <p>The Jekyll server is now live and automatically updates when changes are made to your files.</p> <h3 id="step-2-stopping-the-service">Step 2: Stopping the Service</h3> <p>To shut down the service cleanly, run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman-compose <span class="nt">-f</span> docker-compose-project-podman.yml down
</code></pre></div></div> <p>This command stops and removes the container.</p> <hr/> <h2 id="debugging-and-testing">Debugging and Testing</h2> <p>While using <code class="language-plaintext highlighter-rouge">podman-compose</code> is convenient, you’ll occasionally need to debug or test configurations. Here are a few useful commands:</p> <h3 id="access-the-running-container">Access the Running Container</h3> <p>You can directly interact with the container by opening a shell session inside it:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman <span class="nb">exec</span> <span class="nt">-it</span> al-folio-website /bin/bash
</code></pre></div></div> <p>This provides a terminal inside the container, allowing you to inspect files or run Jekyll commands directly.</p> <h3 id="testing-the-container-manually">Testing the Container Manually</h3> <p>If you’d like to test the container in isolation, you can run a temporary instance with:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman container run <span class="nt">-it</span> <span class="nt">--rm</span> pypak-jekyll-srv /bin/bash
</code></pre></div></div> <p>This creates a disposable container, which is destroyed after you exit.</p> <h3 id="listing-active-containers">Listing Active Containers</h3> <p>Verify which containers are currently running with:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman ps
</code></pre></div></div> <h3 id="removing-stuck-containers">Removing Stuck Containers</h3> <p>If a container fails to stop properly, you can forcibly remove it using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman container <span class="nb">rm </span>al-folio-website
</code></pre></div></div> <hr/> <h2 id="recap">Recap</h2> <p>In this post, we discussed how to use <code class="language-plaintext highlighter-rouge">podman-compose</code> to manage and test your Jekyll development workflow. Here’s a quick summary of what we covered:</p> <ol> <li><strong>Getting Started</strong>: We explored the benefits of <code class="language-plaintext highlighter-rouge">podman-compose</code> for reproducible environments.</li> <li><strong>Compose File</strong>: Broke down the essential components of a <code class="language-plaintext highlighter-rouge">docker-compose</code>-compatible file for Jekyll.</li> <li><strong>Running and Debugging</strong>: Showed how to start, stop, and debug your Jekyll container.</li> </ol> <p>By using <code class="language-plaintext highlighter-rouge">podman-compose</code>, you can simplify container management and ensure consistency across environments, making your workflow more efficient.</p> <hr/> <h2 id="series-wrap-up">Series Wrap-Up</h2> <p>With this third installment, we’ve completed our series on running Jekyll in rootless Podman containers:</p> <ul> <li><a href="https://carljohanrehn.github.io/allehanda/blog/2025/jekyll-podman-rootless-part-1/"><strong>Part 1</strong></a>: Setting up Podman and running rootless containers.</li> <li><a href="https://carljohanrehn.github.io/allehanda/blog/2025/jekyll-podman-rootless-part-2/"><strong>Part 2</strong></a>: Managing file permissions and user mapping.</li> <li><strong>Part 3</strong> (this post): Automating workflows with <code class="language-plaintext highlighter-rouge">podman-compose</code>.</li> </ul> <p>We hope this series inspires you to experiment with containerized workflows for your development projects. If you have questions or would like to share your own use case, feel free to leave a comment below.</p> <p>Happy coding, and good luck with your projects!</p>]]></content><author><name></name></author><category term="fries-al-folio"/><category term="Containers"/><category term="Development"/><category term="Jekyll"/><category term="Podman"/><category term="Rootless"/><summary type="html"><![CDATA[The final part of our series on using Podman rootless containers with Jekyll. This post focuses on testing and running a reproducible server using `podman-compose`.]]></summary></entry><entry><title type="html">Running Jekyll in a Rootless Podman Container: Part 2 - Building and Running</title><link href="https://carljohanrehn.github.io/allehanda/blog/2025/jekyll-podman-rootless-part-2/" rel="alternate" type="text/html" title="Running Jekyll in a Rootless Podman Container: Part 2 - Building and Running"/><published>2025-01-20T10:42:27+00:00</published><updated>2025-01-20T10:42:27+00:00</updated><id>https://carljohanrehn.github.io/allehanda/blog/2025/jekyll-podman-rootless-part-2</id><content type="html" xml:base="https://carljohanrehn.github.io/allehanda/blog/2025/jekyll-podman-rootless-part-2/"><![CDATA[<p>In the second installment of our series, we’ll focus on building a Jekyll container image and running it using rootless Podman. If you haven’t already, consider reviewing <a href="https://carljohanrehn.github.io/allehanda/blog/2025/jekyll-podman-rootless-part-1/">Part 1</a>, where we set up the foundation for running Jekyll using containers.</p> <p>This guide demonstrates building the image and running the container from the folder:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/my-pak/cross-python-development/torch-app-docker/jekyll/docker/fries-al-folio/
</code></pre></div></div> <p>The file <code class="language-plaintext highlighter-rouge">Containerfile-pypak-jekyll-srv</code> will be our main point of reference.</p> <hr/> <h2 id="preparing-the-containerfile">Preparing the Containerfile</h2> <p>The <code class="language-plaintext highlighter-rouge">Containerfile-pypak-jekyll-srv</code> is the configuration file for building the Jekyll container image. Let’s break it down:</p> <h3 id="containerfile-code-example"><code class="language-plaintext highlighter-rouge">Containerfile</code> Code Example</h3> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> pypak-jekyll</span>

<span class="k">USER</span><span class="s"> root</span>

<span class="k">RUN </span><span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'/sv_SE.UTF-8/s/^# //g'</span> /etc/locale.gen <span class="o">&amp;&amp;</span> <span class="se">\
</span>    locale-gen
<span class="k">ENV</span><span class="s"> LANG sv_SE.UTF-8</span>
<span class="k">ENV</span><span class="s"> LANGUAGE sv_SE:sv</span>
<span class="k">ENV</span><span class="s"> LC_ALL sv_SE.UTF-8</span>
<span class="k">ENV</span><span class="s"> TZ="Europe/Stockholm"</span>

<span class="k">USER</span><span class="s"> app</span>

<span class="k">ENV</span><span class="s"> GEM_HOME="/home/app/gems"</span>
<span class="k">ENV</span><span class="s"> PATH="/home/app/gems/bin:${PATH}"</span>

<span class="k">RUN </span>gem <span class="nb">install </span>jekyll bundler
<span class="k">RUN </span><span class="nb">mkdir</span> /home/app/srv
<span class="k">RUN </span><span class="nb">mkdir</span> /home/app/srv/jekyll
<span class="k">ADD</span><span class="s"> Gemfile /home/app/srv/jekyll</span>

<span class="k">WORKDIR</span><span class="s"> /home/app/srv/jekyll</span>

<span class="k">ENV</span><span class="s"> BUNDLE_GEMFILE=$WORKDIR</span>
<span class="k">RUN </span>/home/app/gems/bin/bundle <span class="nb">install</span>
</code></pre></div></div> <h3 id="explanation">Explanation</h3> <ol> <li><strong>Base Image</strong>: <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> pypak-jekyll</span>
</code></pre></div> </div> <p>It extends the base image <code class="language-plaintext highlighter-rouge">pypak-jekyll</code> (reviewed in Part 1).</p> </li> <li> <p><strong>Locale/Timezone Adjustments</strong>:<br/> Locale (<code class="language-plaintext highlighter-rouge">sv_SE.UTF-8</code>) and Timezone (<code class="language-plaintext highlighter-rouge">Europe/Stockholm</code>) are configured to ensure compatibility with Swedish formats.</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">RUN </span><span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'/sv_SE.UTF-8/s/^# //g'</span> /etc/locale.gen <span class="o">&amp;&amp;</span> <span class="se">\
</span>    locale-gen
<span class="k">ENV</span><span class="s"> LANG sv_SE.UTF-8</span>
<span class="k">ENV</span><span class="s"> LANGUAGE sv_SE:sv</span>
<span class="k">ENV</span><span class="s"> LC_ALL sv_SE.UTF-8</span>
<span class="k">ENV</span><span class="s"> TZ="Europe/Stockholm"</span>
</code></pre></div> </div> </li> <li> <p><strong>Non-root User</strong>: Switching to an <code class="language-plaintext highlighter-rouge">app</code> user after managing administrative actions ensures better security.</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">USER</span><span class="s"> app</span>
</code></pre></div> </div> </li> <li> <p><strong>Ruby Environment</strong>:<br/> The <code class="language-plaintext highlighter-rouge">GEM_HOME</code> and updated <code class="language-plaintext highlighter-rouge">PATH</code> allow the app user to install and utilize Ruby gems, including <code class="language-plaintext highlighter-rouge">jekyll</code> and <code class="language-plaintext highlighter-rouge">bundler</code>.</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">ENV</span><span class="s"> GEM_HOME="/home/app/gems"</span>
<span class="k">ENV</span><span class="s"> PATH="/home/app/gems/bin:${PATH}"</span>
<span class="k">RUN </span>gem <span class="nb">install </span>jekyll bundler
</code></pre></div> </div> </li> <li> <p><strong>Directories and Dependencies</strong>:<br/> Prepares directories for the Jekyll project and uses Bundler to resolve dependencies.</p> <div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">RUN </span><span class="nb">mkdir</span> /home/app/srv
<span class="k">RUN </span><span class="nb">mkdir</span> /home/app/srv/jekyll
<span class="k">ADD</span><span class="s"> Gemfile /home/app/srv/jekyll</span>
<span class="k">WORKDIR</span><span class="s"> /home/app/srv/jekyll</span>
<span class="k">ENV</span><span class="s"> BUNDLE_GEMFILE=$WORKDIR</span>
<span class="k">RUN </span>/home/app/gems/bin/bundle <span class="nb">install</span>
</code></pre></div> </div> </li> </ol> <hr/> <h2 id="building-the-container-image">Building the Container Image</h2> <p>Once the <code class="language-plaintext highlighter-rouge">Containerfile</code> is ready, run the following command to build your container image:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman image build <span class="nt">--no-cache</span> <span class="nt">--format</span> docker <span class="nt">-f</span> Containerfile-pypak-jekyll-srv <span class="nt">-t</span> pypak-jekyll-srv <span class="nb">.</span>
</code></pre></div></div> <ul> <li><strong><code class="language-plaintext highlighter-rouge">--no-cache</code></strong>: Ensures no cached layers are reused.</li> <li><strong><code class="language-plaintext highlighter-rouge">--format docker</code></strong>: Uses Docker-compatible formatting.</li> <li><strong><code class="language-plaintext highlighter-rouge">-f</code></strong>: Specifies the <code class="language-plaintext highlighter-rouge">Containerfile</code> to use.</li> <li><strong><code class="language-plaintext highlighter-rouge">-t pypak-jekyll-srv</code></strong>: Tags the resulting image as <code class="language-plaintext highlighter-rouge">pypak-jekyll-srv</code>.</li> </ul> <hr/> <h2 id="running-the-container">Running the Container</h2> <p>With the container image built, there are several methods to run it based on your requirements.</p> <h3 id="1-basic-container-run">1. Basic Container Run</h3> <p>For a quick inspection of the container environment, use the following:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman container run <span class="nt">-it</span> <span class="nt">--rm</span> pypak-jekyll-srv
</code></pre></div></div> <p>This command runs the container interactively (<code class="language-plaintext highlighter-rouge">-it</code>), removes it automatically after exiting (<code class="language-plaintext highlighter-rouge">--rm</code>), and uses the <code class="language-plaintext highlighter-rouge">pypak-jekyll-srv</code> image.</p> <h3 id="2-volume-mapping">2. Volume Mapping</h3> <p>To work with your Jekyll files stored on the host, use volume mapping:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman container run <span class="nt">-it</span> <span class="nt">--rm</span> <span class="nt">-v</span> .:/home/app/torch-app:Z pypak-jekyll-srv
</code></pre></div></div> <ul> <li><strong><code class="language-plaintext highlighter-rouge">-v</code></strong>: Maps the current directory (<code class="language-plaintext highlighter-rouge">.</code>) on your host to <code class="language-plaintext highlighter-rouge">/home/app/torch-app</code> inside the container.</li> <li><strong><code class="language-plaintext highlighter-rouge">:Z</code></strong>: Ensures proper SELinux permissions.</li> </ul> <p>This setup allows seamless sharing of project files between the host and the container.</p> <h3 id="3-running-a-jupyter-notebook">3. Running a Jupyter Notebook</h3> <p>To run a Jupyter Notebook server from the container, utilize port mapping:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman container run <span class="nt">-it</span> <span class="nt">-p</span> 8888:8888 pypak-jekyll-srv
</code></pre></div></div> <ul> <li><strong><code class="language-plaintext highlighter-rouge">-p 8888:8888</code></strong>: Maps host port <code class="language-plaintext highlighter-rouge">8888</code> to the same port inside the container.</li> <li>This command allows you to access the notebook at <a href="http://localhost:8888">http://localhost:8888</a>.</li> </ul> <hr/> <h2 id="conclusion">Conclusion</h2> <p>In this post, we discussed building a container image for Jekyll and explored multiple ways to run and use it. By now, you should have a working image and be capable of running it interactively, with mapped volumes, or even hosting a Jupyter Notebook.</p> <p>In the <a href="https://carljohanrehn.github.io/allehanda/blog/2025/jekyll-podman-rootless-part-3/">next part</a>, we’ll focus on testing and debugging your Jekyll site inside a container. We’ll also explore using <code class="language-plaintext highlighter-rouge">Podman Compose</code> to streamline your container workflows.</p> <p><em>Happy containerizing!</em></p> <hr/> <p><em>This is Part 2 of a series on running Jekyll with rootless Podman containers.</em></p>]]></content><author><name></name></author><category term="fries-al-folio"/><category term="Containers"/><category term="Development"/><category term="Jekyll"/><category term="Podman"/><category term="Rootless"/><summary type="html"><![CDATA[The second part of our series on using Podman rootless containers with Jekyll. We will focus on building the container image and running the container using different methods.]]></summary></entry><entry><title type="html">Running Jekyll in a Rootless Podman Container: Part 1 - Setting the Stage</title><link href="https://carljohanrehn.github.io/allehanda/blog/2025/jekyll-podman-rootless-part-1/" rel="alternate" type="text/html" title="Running Jekyll in a Rootless Podman Container: Part 1 - Setting the Stage"/><published>2025-01-20T09:42:43+00:00</published><updated>2025-01-20T09:42:43+00:00</updated><id>https://carljohanrehn.github.io/allehanda/blog/2025/jekyll-podman-rootless-part-1</id><content type="html" xml:base="https://carljohanrehn.github.io/allehanda/blog/2025/jekyll-podman-rootless-part-1/"><![CDATA[<p>In this first part of a three-part series, we’ll explore how to run Jekyll, a static site generator, inside a rootless Podman container. Rootless containers enhance security by eliminating the need for root privileges, while also providing a lightweight and streamlined development workflow. This guide focuses on key aspects such as user mapping, file ownership, and running Jekyll with <code class="language-plaintext highlighter-rouge">podman-compose</code>.</p> <hr/> <h2 id="setting-up-the-podman-environment">Setting Up the Podman Environment</h2> <p>We’ll assume you’re working in a project folder such as the following:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/my-pak/cross-python-development/torch-app-docker/jekyll/docker/fries-al-folio/
</code></pre></div></div> <p>You’ll want to familiarize yourself with the provided <code class="language-plaintext highlighter-rouge">README</code> file for this project, named:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>README-jekyll-podman-rootless
</code></pre></div></div> <p>Let’s dive into creating a container image for Jekyll and preparing the environment.</p> <hr/> <h2 id="building-the-jekyll-image">Building the Jekyll Image</h2> <p>First, we need to create a Podman container image for Jekyll. The build process utilizes a <code class="language-plaintext highlighter-rouge">Containerfile</code>, specifically:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Containerfile-pypak-jekyll-srv
</code></pre></div></div> <p>Open the file in your preferred editor to review its contents:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>emacs Containerfile-pypak-jekyll-srv
</code></pre></div></div> <p>Once reviewed, build the container image using the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman image build <span class="nt">--no-cache</span> <span class="nt">--format</span> docker <span class="nt">-f</span> Containerfile-pypak-jekyll-srv <span class="nt">-t</span> pypak-jekyll-srv <span class="nb">.</span>
</code></pre></div></div> <p>This will create a Docker-format container image named <code class="language-plaintext highlighter-rouge">pypak-jekyll-srv</code>, which we’ll use to run our Jekyll service.</p> <hr/> <h2 id="understanding-file-ownership-in-rootless-containers">Understanding File Ownership in Rootless Containers</h2> <p>Next, let’s address a vital aspect of rootless containers: file ownership. File ownership may differ inside the container compared to the host machine.</p> <h3 id="checking-current-file-ownership">Checking Current File Ownership</h3> <p>Run the following command to inspect ownership for your project files:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> <span class="nt">-al</span>
</code></pre></div></div> <p>You should see output similar to this:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>drwxr-xr-x. 1 alpha alpha  1700 Apr 29 09:34  .
drwxr-xr-x. 1 alpha alpha   190 Mar 18 10:38  ..
-rw-r--r--. 1 alpha alpha   243 Feb  7 17:08  404.html
drwxr-xr-x. 1 alpha alpha    58 Feb  7 17:08  assets
...
</code></pre></div></div> <p>Here, the files are owned by the user <code class="language-plaintext highlighter-rouge">alpha</code> on your host. We now use <code class="language-plaintext highlighter-rouge">podman unshare</code> to examine ownership inside the container.</p> <h3 id="inspecting-file-ownership-inside-the-container">Inspecting File Ownership Inside the Container</h3> <p>Inside the container, run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman unshare <span class="nb">ls</span> <span class="nt">-al</span>
</code></pre></div></div> <p>This will output something like:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>drwxr-xr-x. 1 root root  1700 Apr 29 09:34  .
drwxr-xr-x. 1 root root   190 Mar 18 10:38  ..
-rw-r--r--. 1 root root   243 Feb  7 17:08  404.html
drwxr-xr-x. 1 root root    58 Feb  7 17:08  assets
...
</code></pre></div></div> <p>Notice that the container considers <code class="language-plaintext highlighter-rouge">root</code> as the owner of these files. This discrepancy occurs due to user ID mappings between the container and host.</p> <hr/> <h2 id="mapping-user-ids-in-rootless-containers">Mapping User IDs in Rootless Containers</h2> <p>To solve this ownership challenge, we’ll map the container’s <code class="language-plaintext highlighter-rouge">root</code> user to our <code class="language-plaintext highlighter-rouge">alpha</code> user on the host machine.</p> <h3 id="step-1-identify-your-host-user-id">Step 1: Identify Your Host User ID</h3> <p>Run the following command to find your user’s ID:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">id</span> <span class="nt">-u</span>
</code></pre></div></div> <p>You should see output like:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1000
</code></pre></div></div> <p>This ID corresponds to the user <code class="language-plaintext highlighter-rouge">alpha</code>.</p> <h3 id="step-2-examine-the-user-range">Step 2: Examine the User Range</h3> <p>Next, check the user ID mapping range for rootless containers:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman unshare <span class="nb">cat</span> /proc/self/uid_map
</code></pre></div></div> <p>The output should look like this:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0       1000          1
1     100000      65536
</code></pre></div></div> <p>This indicates the mappings:</p> <ul> <li><code class="language-plaintext highlighter-rouge">uid 0</code> in the container maps to <code class="language-plaintext highlighter-rouge">uid 1000</code> (current non-root user on the host).</li> <li>The range starting at <code class="language-plaintext highlighter-rouge">uid 1</code> maps to <code class="language-plaintext highlighter-rouge">uid 100000</code> and higher.</li> </ul> <h3 id="step-3-adjust-file-ownership-for-compatibility">Step 3: Adjust File Ownership for Compatibility</h3> <p>We need to ensure that files in our project are owned by <code class="language-plaintext highlighter-rouge">uid 1000:1000</code> in the container, which matches the host. Use the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman unshare <span class="nb">chown </span>1000:1000 <span class="nt">-R</span> <span class="nb">.</span>
</code></pre></div></div> <p>Check the results using:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> <span class="nt">-al</span>
</code></pre></div></div> <p>You’ll see the new ownership reflected as:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>drwxr-xr-x. 1 100999 100999  1518 Apr 29 10:04 .
drwxr-xr-x. 1 alpha  alpha     44 Mar 25 08:08 ..
-rw-r--r--. 1 100999 100999   243 Feb  7 17:08 404.html
...
</code></pre></div></div> <p>Inside the unshared context of <code class="language-plaintext highlighter-rouge">podman</code>, ownership will appear correctly mapped back to your host’s user:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman unshare <span class="nb">ls</span> <span class="nt">-al</span>
</code></pre></div></div> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>drwxr-xr-x. 1 alpha alpha  1518 Apr 29 10:04 .
drwxr-xr-x. 1 root  root     44 Mar 25 08:08 ..
-rw-r--r--. 1 alpha alpha   243 Feb  7 17:08 404.html
...
</code></pre></div></div> <hr/> <h2 id="running-jekyll-with-podman-compose">Running Jekyll with <code class="language-plaintext highlighter-rouge">podman-compose</code></h2> <p>Finally, we’re ready to run the Jekyll container. This setup uses <code class="language-plaintext highlighter-rouge">podman-compose</code> to define and manage container services.</p> <h3 id="step-1-check-your-compose-configuration">Step 1: Check Your Compose Configuration</h3> <p>Open your <code class="language-plaintext highlighter-rouge">docker-compose</code> file for review:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>emacs docker-compose-project-podman.yml
</code></pre></div></div> <p>Ensure the Jekyll service is defined properly.</p> <h3 id="step-2-start-the-container">Step 2: Start the Container</h3> <p>Run the following command to start the Jekyll service:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman-compose <span class="nt">-f</span> docker-compose-project-podman.yml up
</code></pre></div></div> <p>Once launched, your Jekyll service will be available as per the compose file’s configuration.</p> <p>To stop the service:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>podman-compose <span class="nt">-f</span> docker-compose-project-podman.yml down
</code></pre></div></div> <hr/> <h2 id="reverting-file-ownership-after-running-the-container">Reverting File Ownership After Running the Container</h2> <p>Before ending your work, revert the file ownership of the project back to your host user:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo chown </span>alpha:alpha <span class="nt">-R</span> <span class="nb">.</span>
</code></pre></div></div> <p>Double-check the ownership:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> <span class="nt">-al</span>
</code></pre></div></div> <p>This ensures consistent permissions when working outside the context of Podman. File ownership inside the container will remain usable.</p> <hr/> <h2 id="conclusion">Conclusion</h2> <p>In this post, we’ve covered how to build a custom Jekyll image, manage user ID mapping in rootless containers, and set up <code class="language-plaintext highlighter-rouge">podman-compose</code> to simplify containerized Jekyll workflows. Understanding file ownership and user mapping is vital for working securely with rootless containers.</p> <p>Stay tuned for <a href="https://carljohanrehn.github.io/allehanda/blog/2025/jekyll-podman-rootless-part-2/">next part</a>, where we’ll focus on running and testing Jekyll inside the container in a reproducible way!</p> <hr/> <p><em>This is Part 1 of a series on using rootless Podman containers with Jekyll.</em></p>]]></content><author><name></name></author><category term="fries-al-folio"/><category term="Containers"/><category term="Development"/><category term="Jekyll"/><category term="Podman"/><category term="Rootless"/><summary type="html"><![CDATA[A guide on setting up and running Jekyll in a rootless Podman container. We explore the importance of user mapping and file ownership when using rootless containers.]]></summary></entry><entry><title type="html">a post with TikZJax</title><link href="https://carljohanrehn.github.io/allehanda/blog/2023/tikzjax/" rel="alternate" type="text/html" title="a post with TikZJax"/><published>2023-12-12T22:25:00+00:00</published><updated>2023-12-12T22:25:00+00:00</updated><id>https://carljohanrehn.github.io/allehanda/blog/2023/tikzjax</id><content type="html" xml:base="https://carljohanrehn.github.io/allehanda/blog/2023/tikzjax/"><![CDATA[<p>This is an example post with TikZ code. TikZJax converts script tags (containing TikZ code) into SVGs.</p> <script type="text/tikz">
\begin{tikzpicture}
    \draw[red,fill=black!60!red] (0,0) circle [radius=1.5];
    \draw[green,fill=black!60!green] (0,0) circle [x radius=1.5cm, y radius=10mm];
    \draw[blue,fill=black!60!blue] (0,0) circle [x radius=1cm, y radius=5mm, rotate=30];
\end{tikzpicture}
</script>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included TikZ code could look like]]></summary></entry><entry><title type="html">a post with bibliography</title><link href="https://carljohanrehn.github.io/allehanda/blog/2023/post-bibliography/" rel="alternate" type="text/html" title="a post with bibliography"/><published>2023-07-12T13:56:00+00:00</published><updated>2023-07-12T13:56:00+00:00</updated><id>https://carljohanrehn.github.io/allehanda/blog/2023/post-bibliography</id><content type="html" xml:base="https://carljohanrehn.github.io/allehanda/blog/2023/post-bibliography/"><![CDATA[<p>This post shows how to add bibliography to simple blog posts. If you would like something more academic, check the <a href="/allehanda/blog/2021/distill/">distill style post</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="bib"/><summary type="html"><![CDATA[an example of a blog post with bibliography]]></summary></entry><entry><title type="html">a post with jupyter notebook</title><link href="https://carljohanrehn.github.io/allehanda/blog/2023/jupyter-notebook/" rel="alternate" type="text/html" title="a post with jupyter notebook"/><published>2023-07-04T12:57:00+00:00</published><updated>2023-07-04T12:57:00+00:00</updated><id>https://carljohanrehn.github.io/allehanda/blog/2023/jupyter-notebook</id><content type="html" xml:base="https://carljohanrehn.github.io/allehanda/blog/2023/jupyter-notebook/"><![CDATA[<p>To include a jupyter notebook in a post, you can use the following code:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{::nomarkdown}
{% assign jupyter_path = "assets/jupyter/blog.ipynb" | relative_url %}
{% capture notebook_exists %}{% file_exists assets/jupyter/blog.ipynb %}{% endcapture %}
{% if notebook_exists == "true" %}
    {% jupyter_notebook jupyter_path %}
{% else %}
    <span class="nt">&lt;p&gt;</span>Sorry, the notebook you are looking for does not exist.<span class="nt">&lt;/p&gt;</span>
{% endif %}
{:/nomarkdown}
</code></pre></div></div> <p>Let’s break it down: this is possible thanks to <a href="https://github.com/red-data-tools/jekyll-jupyter-notebook">Jekyll Jupyter Notebook plugin</a> that allows you to embed jupyter notebooks in your posts. It basically calls <a href="https://nbconvert.readthedocs.io/en/latest/usage.html#convert-html"><code class="language-plaintext highlighter-rouge">jupyter nbconvert --to html</code></a> to convert the notebook to an html page and then includes it in the post. Since <a href="https://jekyllrb.com/docs/configuration/markdown/">Kramdown</a> is the default Markdown renderer for Jekyll, we need to surround the call to the plugin with the <a href="https://kramdown.gettalong.org/syntax.html#extensions">::nomarkdown</a> tag so that it stops processing this part with Kramdown and outputs the content as-is.</p> <p>The plugin takes as input the path to the notebook, but it assumes the file exists. If you want to check if the file exists before calling the plugin, you can use the <code class="language-plaintext highlighter-rouge">file_exists</code> filter. This avoids getting a 404 error from the plugin and ending up displaying the main page inside of it instead. If the file does not exist, you can output a message to the user. The code displayed above outputs the following:</p> <div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/allehanda/assets/jupyter/blog.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div> <p>Note that the jupyter notebook supports both light and dark themes.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="jupyter"/><summary type="html"><![CDATA[an example of a blog post with jupyter notebook]]></summary></entry><entry><title type="html">a post with custom blockquotes</title><link href="https://carljohanrehn.github.io/allehanda/blog/2023/custom-blockquotes/" rel="alternate" type="text/html" title="a post with custom blockquotes"/><published>2023-05-12T19:53:00+00:00</published><updated>2023-05-12T19:53:00+00:00</updated><id>https://carljohanrehn.github.io/allehanda/blog/2023/custom-blockquotes</id><content type="html" xml:base="https://carljohanrehn.github.io/allehanda/blog/2023/custom-blockquotes/"><![CDATA[<p>This post shows how to add custom styles for blockquotes. Based on <a href="https://github.com/sighingnow/jekyll-gitbook">jekyll-gitbook</a> implementation.</p> <p>We decided to support the same custom blockquotes as in <a href="https://sighingnow.github.io/jekyll-gitbook/jekyll/2022-06-30-tips_warnings_dangers.html">jekyll-gitbook</a>, which are also found in a lot of other sites’ styles. The styles definitions can be found on the <a href="https://github.com/alshedivat/al-folio/blob/master/_sass/_base.scss">_base.scss</a> file, more specifically:</p> <div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* Tips, warnings, and dangers */</span>
<span class="nc">.post</span> <span class="nc">.post-content</span> <span class="nt">blockquote</span> <span class="p">{</span>
    <span class="k">&amp;</span><span class="nc">.block-tip</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span> <span class="nt">h2</span><span class="o">,</span> <span class="nt">h3</span><span class="o">,</span> <span class="nt">h4</span><span class="o">,</span> <span class="nt">h5</span><span class="o">,</span> <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">&amp;</span><span class="nc">.block-warning</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span> <span class="nt">h2</span><span class="o">,</span> <span class="nt">h3</span><span class="o">,</span> <span class="nt">h4</span><span class="o">,</span> <span class="nt">h5</span><span class="o">,</span> <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">&amp;</span><span class="nc">.block-danger</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span> <span class="nt">h2</span><span class="o">,</span> <span class="nt">h3</span><span class="o">,</span> <span class="nt">h4</span><span class="o">,</span> <span class="nt">h5</span><span class="o">,</span> <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>A regular blockquote can be used as following:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; This is a regular blockquote</span>
<span class="gt">&gt; and it can be used as usual</span>
</code></pre></div></div> <blockquote> <p>This is a regular blockquote and it can be used as usual</p> </blockquote> <p>These custom styles can be used by adding the specific class to the blockquote, as follows:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### TIP</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; A tip can be used when you want to give advice</span>
<span class="gt">&gt; related to a certain content.</span>
{: .block-tip }
</code></pre></div></div> <blockquote class="block-tip"> <h5 id="tip">TIP</h5> <p>A tip can be used when you want to give advice related to a certain content.</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### WARNING</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a warning, and thus should</span>
<span class="gt">&gt; be used when you want to warn the user</span>
{: .block-warning }
</code></pre></div></div> <blockquote class="block-warning"> <h5 id="warning">WARNING</h5> <p>This is a warning, and thus should be used when you want to warn the user</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### DANGER</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a danger zone, and thus should</span>
<span class="gt">&gt; be used carefully</span>
{: .block-danger }
</code></pre></div></div> <blockquote class="block-danger"> <h5 id="danger">DANGER</h5> <p>This is a danger zone, and thus should be used carefully</p> </blockquote>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="blockquotes"/><summary type="html"><![CDATA[an example of a blog post with custom blockquotes]]></summary></entry><entry><title type="html">a post with table of contents on a sidebar</title><link href="https://carljohanrehn.github.io/allehanda/blog/2023/sidebar-table-of-contents/" rel="alternate" type="text/html" title="a post with table of contents on a sidebar"/><published>2023-04-25T14:14:00+00:00</published><updated>2023-04-25T14:14:00+00:00</updated><id>https://carljohanrehn.github.io/allehanda/blog/2023/sidebar-table-of-contents</id><content type="html" xml:base="https://carljohanrehn.github.io/allehanda/blog/2023/sidebar-table-of-contents/"><![CDATA[<p>This post shows how to add a table of contents as a sidebar.</p> <h2 id="adding-a-table-of-contents">Adding a Table of Contents</h2> <p>To add a table of contents to a post as a sidebar, simply add</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">sidebar</span><span class="pi">:</span> <span class="s">left</span>
</code></pre></div></div> <p>to the front matter of the post. The table of contents will be automatically generated from the headings in the post. If you wish to display the sidebar to the right, simply change <code class="language-plaintext highlighter-rouge">left</code> to <code class="language-plaintext highlighter-rouge">right</code>.</p> <h3 id="example-of-sub-heading-1">Example of Sub-Heading 1</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h3 id="example-of-another-sub-heading-1">Example of another Sub-Heading 1</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h2 data-toc-text="Customizing" id="customizing-your-table-of-contents">Customizing Your Table of Contents</h2> <p>If you want to learn more about how to customize the table of contents of your sidebar, you can check the <a href="https://afeld.github.io/bootstrap-toc/">bootstrap-toc</a> documentation. Notice that you can even customize the text of the heading that will be displayed on the sidebar.</p> <h3 id="example-of-sub-heading-2">Example of Sub-Heading 2</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p> <h3 id="example-of-another-sub-heading-2">Example of another Sub-Heading 2</h3> <p>Jean shorts raw denim Vice normcore, art party High Life PBR skateboard stumptown vinyl kitsch. Four loko meh 8-bit, tousled banh mi tilde forage Schlitz dreamcatcher twee 3 wolf moon. Chambray asymmetrical paleo salvia, sartorial umami four loko master cleanse drinking vinegar brunch. <a href="https://www.pinterest.com">Pinterest</a> DIY authentic Schlitz, hoodie Intelligentsia butcher trust fund brunch shabby chic Kickstarter forage flexitarian. Direct trade <a href="https://en.wikipedia.org/wiki/Cold-pressed_juice">cold-pressed</a> meggings stumptown plaid, pop-up taxidermy. Hoodie XOXO fingerstache scenester Echo Park. Plaid ugh Wes Anderson, freegan pug selvage fanny pack leggings pickled food truck DIY irony Banksy.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="toc"/><category term="sidebar"/><summary type="html"><![CDATA[an example of a blog post with table of contents on a sidebar]]></summary></entry><entry><title type="html">a post with audios</title><link href="https://carljohanrehn.github.io/allehanda/blog/2023/audios/" rel="alternate" type="text/html" title="a post with audios"/><published>2023-04-25T10:25:00+00:00</published><updated>2023-04-25T10:25:00+00:00</updated><id>https://carljohanrehn.github.io/allehanda/blog/2023/audios</id><content type="html" xml:base="https://carljohanrehn.github.io/allehanda/blog/2023/audios/"><![CDATA[<p>This is an example post with audios. It supports local audio files.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/allehanda/assets/audio/epicaly-short-113909.mp3" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="https://cdn.pixabay.com/download/audio/2022/06/25/audio_69a61cd6d6.mp3" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="audios"/><summary type="html"><![CDATA[this is what included audios could look like]]></summary></entry><entry><title type="html">a post with videos</title><link href="https://carljohanrehn.github.io/allehanda/blog/2023/videos/" rel="alternate" type="text/html" title="a post with videos"/><published>2023-04-24T21:01:00+00:00</published><updated>2023-04-24T21:01:00+00:00</updated><id>https://carljohanrehn.github.io/allehanda/blog/2023/videos</id><content type="html" xml:base="https://carljohanrehn.github.io/allehanda/blog/2023/videos/"><![CDATA[<p>This is an example post with videos. It supports local video files.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/allehanda/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/allehanda/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div> <p>It does also support embedding videos from different sources. Here are some examples:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://www.youtube.com/embed/jNQXAC9IVRw" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://player.vimeo.com/video/524933864?h=1ac4fd9fb4&amp;title=0&amp;byline=0&amp;portrait=0" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> </div>]]></content><author><name></name></author><category term="sample-posts"/><category term="including"/><category term="videos"/><summary type="html"><![CDATA[this is what included videos could look like]]></summary></entry></feed>